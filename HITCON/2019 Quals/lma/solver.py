import binascii
from math import sqrt

from Crypto.Util.number import *

e = 1048583
d = 20899585599499852848600179189763086698516108548228367107221738096450499101070075492197700491683249172909869748620431162381087017866603003080844372390109407618883775889949113518883655204495367156356586733638609604914325927159037673858380872827051492954190012228501796895529660404878822550757780926433386946425164501187561418082866346427628551763297010068329425460680225523270632454412376673863754258135691783420342075219153761633410012733450586771838248239221434791288928709490210661095249658730871114233033907339401132548352479119599592161475582267434069666373923164546185334225821332964035123667137917080001159691927
iq = 22886390627173202444468626406642274959028635116543626995297684671305848436910064602418012808595951325519844918478912090039470530649857775854959462500919029371215000179065185673136642143061689849338228110909931445119687113803523924040922470616407096745128917352037282612768345609735657018628096338779732460743
ip = 138356012157150927033117814862941924437637775040379746970778376921933744927520585574595823734209547857047013402623714044512594300691782086053475259157899010363944831564630625623351267412232071416191142966170634950729938561841853176635423819365023039470901382901261884795304947251115006930995163847675576699331

flag = bytes_to_long(binascii.unhexlify("32074de818f2feeb788e36d7d3ee09f0000381584a72b2fba0dcc9a2ebe5fd79cf2d6fd40c4dbfea27d3489704f2c1a30b17a783baa67229d02043c5bc9bdb995ae984d80a96bd79370ea2c356f39f85a12d16983598c1fb772f9183441fea5dfeb5b26455df75de18ce70a6a9e9dbc0a4ca434ba94cf4d1e5347395cf7aafa756c8a5bd6fd166bc30245a4bded28f5baac38d024042a166369f7515e8b0c479a1965b5988b350064648738f6585c0a0d1463bd536d11a105bb926b44236593b5c6c71ef5b132cd9c211e8ad9131aa53ffde88f5b0df18e7c45bcdb6244edcaa8d386196d25297c259fca3be37f0f2015f40cb5423a918c51383390dfd5a8703"))

ed = e * d - 1

# k = None
k = 973605

if k is None:
    cands = []
    for i in xrange(2, e):
        if ed % i == 0:
            cands.append(i)

    l = len(cands)

    for (i, cand) in enumerate(cands):
        # pq - p - q
        A = ed // cand - 1
        mp = A * iq + 1
        nq = A * ip + 1
        mnN = mp * nq

        wow_flag = pow(flag, e * d, mnN)
        g = GCD(wow_flag - flag, mnN)
        print '{}/{} - g: {} - k: {}'.format(i, l, g, cand)

    exit(0)

phi_N = ed // k
# g = 2^2 * 3 * 7 * N
N = 22509077260984027608263845908083202879597081619164800783060781115945741547031252889863077300004310236160814653393991988068104999928735140821504649764471313283345921984799288521496479399032837319974588038186917872597078510975400908137738190304700710900604891709265153418588830065918981914371070605822998222527238465925300150253661563857557769597206945843298561291788401379974127990007737364134474570192828364417568030703631487414510799126846577679080152555651843717973023204220528124089432708534457966658829476472791371567790491496967424845002161008643478300481541860754837427906812836584810660110698219790829058527133

b = N + 1 - phi_N
rt = 31428033367087156196807697734415429810260723389415539982205621254789905024669102016374769945692374577870810258270965525142762178589493341913410431728836174738759414059224613970490490247061968840990750702843247593239981277559790931149898896724773467692721997823034213193521161427103373579005196639897606738452

assert b * b - 4 * N == rt * rt

p = (b + rt) >> 1
q = (b - rt) >> 1

assert N == p * q

dec = pow(flag, d, N)
print long_to_bytes(dec)
