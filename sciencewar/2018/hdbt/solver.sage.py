
# This file was *autogenerated* from the file solver.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0x40bd6e5607da03bf = Integer(0x40bd6e5607da03bf); _sage_const_64 = Integer(64); _sage_const_0 = Integer(0); _sage_const_63 = Integer(63); _sage_const_2 = Integer(2); _sage_const_0x45620b52aa48fa85 = Integer(0x45620b52aa48fa85); _sage_const_1 = Integer(1); _sage_const_0xA5118FA1C766BF85 = Integer(0xA5118FA1C766BF85); _sage_const_0x493cd4e5fc020560 = Integer(0x493cd4e5fc020560); _sage_const_0x254847ec89dc651 = Integer(0x254847ec89dc651); _sage_const_0xE273A75A9956DAA7 = Integer(0xE273A75A9956DAA7)
from sage.all import *
from Crypto.Util.number import long_to_bytes
import sys

N = _sage_const_63 

const1 = _sage_const_0xA5118FA1C766BF85 
const2 = _sage_const_0xE273A75A9956DAA7 


def gmul(a, b):
    acc = _sage_const_0 
    while b > _sage_const_0 :
        if b & _sage_const_1 :
            acc = acc.__xor__(a)
        a = a << _sage_const_1 
        if a & (_sage_const_1  << N):
            a = (a.__xor__(const2)) & ((_sage_const_1  << _sage_const_64 ) - _sage_const_1 )
        b >>= _sage_const_1 
    return acc


data = [_sage_const_0x254847ec89dc651 , _sage_const_0x40bd6e5607da03bf , _sage_const_0x45620b52aa48fa85 , _sage_const_0x493cd4e5fc020560 ]
g = GF(_sage_const_2 **_sage_const_63 , modulus=GF(_sage_const_2 **_sage_const_64 ).fetch_int(const2), check_irreducible=False, names=('z',)); (z,) = g._first_ngens(1)
target = g.fetch_int(const1.__xor__(const2))
inv_target = ((target) ** (-_sage_const_1 )).integer_representation()

for current in data:
    result = gmul(current, inv_target)
    sys.stdout.write(long_to_bytes(result)[::-_sage_const_1 ])
sys.stdout.write('\n')

