// g++ -O2 -o qr_reverse qr_reverse.cpp

#include <cstdio>

const int SIZE = 45;

char fixed[SIZE][SIZE+1] = {
	"222222210000000000000000000000200011212222222",
	"211111210000000000000000000000000012112111112",
	"212221210000000000000000000000000012112122212",
	"212221210000000000000000000000000012212122212",
	"212221210000000000002222200000000022212122212",
	"211111210000000000002111200000000011112111112",
	"222222212121212121212121212121212121212222222",
	"111111110000000000002111200000000000011111111",
	"110000200000000000002222200000000000000000000",
	"000000100000000000000000000000000000000000000",
	"000000200000000000000000000000000000000000000",
	"000000100000000000000000000000000000000000000",
	"000000200000000000000000000000000000000000000",
	"000000100000000000000000000000000000000000000",
	"000000200000000000000000000000000000000000000",
	"000000100000000000000000000000000000000000000",
	"000000200000000000000000000000000000000000000",
	"000000100000000000000000000000000000000000000",
	"000000200000000000000000000000000000000000000",
	"000000100000000000000000000000000000000000000",
	"000022222000000000002222200000000000222220000",
	"000021112000000000002111200000000000211120000",
	"000021212000000000002121200000000000212120000",
	"000021112000000000002111200000000000211120000",
	"000022222000000000002222200000000000222220000",
	"000000100000000000000000000000000000000000000",
	"000000200000000000000000000000000000000000000",
	"000000100000000000000000000000000000000000000",
	"000000200000000000000000000000000000000000000",
	"000000100000000000000000000000000000000000000",
	"000000200000000000000000000000000000000000000",
	"000000100000000000000000000000000000000000000",
	"000000200000000000000000000000000000000000000",
	"000000100000000000000000000000000000000000000",
	"111121200000000000000000000000000000000000000",
	"122221100000000000000000000000000000000000000",
	"211221200000000000002222200000000000222220000",
	"111111112000000000002111200000000000211120000",
	"222222210000000000002121200000000000212120000",
	"211111210000000000002111200000000000211120000",
	"212221210000000000002222200000000000222220000",
	"212221210000000000000000000000000000000000000",
	"212221210000000000000000000000000000000000000",
	"211111211000000000000000000000000000000000000",
	"222222211000000000000000000000000000000000000",
};

char board[SIZE][SIZE], click[SIZE][SIZE];

char simulate(int y, int x) {
	int dir[4][2] = {
		0, 1, 1, 0, 0, -1, -1, 0
	};
	
	char now = click[y][x];
	for (int t = 0; t < 4; t++) {
		int ny = y + dir[t][0], nx = x + dir[t][1];
		if (0 <= ny && ny < SIZE && 0 <= nx && nx < SIZE) {
			now = (now + 2*click[ny][nx]) % 3;
		}
	}

	return now;
}

char neighbor_click(int y, int x) {
	char now = simulate(y, x);

	if (board[y][x] == now) return 0;
	else if (board[y][x] == (now+2) % 3) return 1;
	else return 2;
}

bool check_fixed(int sy, int sx, int ey, int ex) {
	for (int y = sy; y <= ey; y++) {
		for (int x = sx; x <= ex; x++) {
			if (fixed[y][x] == 1 && click[y][x] != 0) return 0;
			if (fixed[y][x] == 2 && click[y][x] == 0) return 0;
		}
	}
	return 1;
}

void solve_fixed(int sy, int sx) {
	int ey = sy+6, ex = sx+6;
	click[sy][sx] = (board[sy][sx]-board[sy+1][sx+1]+3) % 3;
	click[sy][ex] = (board[sy][ex]-board[sy+1][ex-1]+3) % 3;

	for (int t = 1; t <= 2; t++) {
		click[sy][sx+1] = t;
		for (int x = sx+2; x < sx+6; x++) {
			click[sy][x] = 0;
			click[sy][x] = neighbor_click(sy, x-1);
		}

		for (int y = sy+1; y <= sy+6; y++) {
			for (int x = sx; x <= sx+6; x++) {
				click[y][x] = 0;
				click[y][x] = neighbor_click(y-1, x);
			}
		}

		if (check_fixed(sy, sx, ey, ex)) {
			return;
		}
	}
}

int main() {
	for (int y = 0; y < SIZE; y++) {
		for (int x = 0; x < SIZE; x++) {
			char t[2];
			scanf("%1s", t);
			board[y][x] = t[0] == 'R' ? 0 : t[0] == 'G' ? 1 : 2;
			fixed[y][x] -= '0';
		}
	}

	solve_fixed(0, 0);
	solve_fixed(SIZE-7, 0);
	solve_fixed(0, SIZE-7);

	for (int bit = 0; bit < (1 << 15); bit++) {
		for (int i = 0; i < 15; i++) {
			click[6][8+2*i] = ((bit >> i) & 1)+1;
		}

		for (int x = 8; x < SIZE-8; x++) {
			for (int y = 0; y <= 5; y++) {
				click[y][x] = 0;
				click[y][x] = neighbor_click(y, x-1);
			}
		}

		if (!check_fixed(0, 8, 6, SIZE-9)) goto FAIL;

		for (int y = 7; y < SIZE; y++) {
			for (int x = 0; x < SIZE; x++) {
				click[y][x] = 0;
				click[y][x] = neighbor_click(y-1, x);
			}
			if (!check_fixed(y, 0, y, SIZE-1)) goto FAIL;
		}
		break;
	FAIL:
		continue;
	}

	for (int y = 0; y < SIZE; y++) {
		for (int x = 0; x < SIZE; x++) {
			printf("%c", click[y][x] ? '1' : '0');
		}
		puts("");
	}

	return 0;
}
