# this code translates VM opcode to C code
# you have to further optimize the converted code to get the flag

header = '''#include <stdio.h>
#include <string.h>

int main(){
    char table[256] = {0, 0xA1, 0x42, 0xE3, 0x84, 0x25, 0xC6, 0x67, 8, 0xA9, 0x4A, 0xEB, 0x8C, 0x2D, 0xCE, 0x6F, 0x10, 0xB1, 0x52, 0xF3, 0x94, 0x35, 0xD6, 0x77, 0x18, 0xB9, 0x5A, 0xFB, 0x9C, 0x3D, 0xDE, 0x7F, 0x20, 0xC1, 0x62, 3, 0xA4, 0x45, 0xE6, 0x87, 0x28, 0xC9, 0x6A, 0xB, 0xAC, 0x4D, 0xEE, 0x8F, 0x30, 0xD1, 0x72, 0x13, 0xB4, 0x55, 0xF6, 0x97, 0x38, 0xD9, 0x7A, 0x1B, 0xBC, 0x5D, 0xFE, 0x9F, 0x40, 0xE1, 0x82, 0x23, 0xC4, 0x65, 6, 0xA7, 0x48, 0xE9, 0x8A, 0x2B, 0xCC, 0x6D, 0xE, 0xAF, 0x50, 0xF1, 0x92, 0x33, 0xD4, 0x75, 0x16, 0xB7, 0x58, 0xF9, 0x9A, 0x3B, 0xDC, 0x7D, 0x1E, 0xBF, 0x60, 1, 0xA2, 0x43, 0xE4, 0x85, 0x26, 0xC7, 0x68, 9, 0xAA, 0x4B, 0xEC, 0x8D, 0x2E, 0xCF, 0x70, 0x11, 0xB2, 0x53, 0xF4, 0x95, 0x36, 0xD7, 0x78, 0x19, 0xBA, 0x5B, 0xFC, 0x9D, 0x3E, 0xDF, 0x80, 0x21, 0xC2, 0x63, 4, 0xA5, 0x46, 0xE7, 0x88, 0x29, 0xCA, 0x6B, 0xC, 0xAD, 0x4E, 0xEF, 0x90, 0x31, 0xD2, 0x73, 0x14, 0xB5, 0x56, 0xF7, 0x98, 0x39, 0xDA, 0x7B, 0x1C, 0xBD, 0x5E, 0xFF, 0xA0, 0x41, 0xE2, 0x83, 0x24, 0xC5, 0x66, 7, 0xA8, 0x49, 0xEA, 0x8B, 0x2C, 0xCD, 0x6E, 0xF, 0xB0, 0x51, 0xF2, 0x93, 0x34, 0xD5, 0x76, 0x17, 0xB8, 0x59, 0xFA, 0x9B, 0x3C, 0xDD, 0x7E, 0x1F, 0xC0, 0x61, 2, 0xA3, 0x44, 0xE5, 0x86, 0x27, 0xC8, 0x69, 0xA, 0xAB, 0x4C, 0xED, 0x8E, 0x2F, 0xD0, 0x71, 0x12, 0xB3, 0x54, 0xF5, 0x96, 0x37, 0xD8, 0x79, 0x1A, 0xBB, 0x5C, 0xFD, 0x9E, 0x3F, 0xE0, 0x81, 0x22, 0xC3, 0x64, 5, 0xA6, 0x47, 0xE8, 0x89, 0x2A, 0xCB, 0x6C, 0xD, 0xAE, 0x4F, 0xF0, 0x91, 0x32, 0xD3, 0x74, 0x15, 0xB6, 0x57, 0xF8, 0x99, 0x3A, 0xDB, 0x7C, 0x1D, 0xBE, 0x5F};

    const int MEM_SIZE = 10000;
    unsigned char mem[MEM_SIZE];
    int index = 0;

    memset(mem, 0, MEM_SIZE);

'''

footer = '''return 0;
}'''


def bit(index):
    return 1 if ord(data[index // 8]) & (128 >> (index % 8)) != 0 else 0

def decode(index):
    return bit(3 * index) * 4 + bit(3 * index + 1) * 2 + bit(3 * index + 2)


with open('flagvm', 'rb') as f:
    data = f.read()

max_len = len(data) * 8 // 3

program = ''
for i in range(max_len):
    instruction = decode(i)

    if instruction == 0:
        program += 'mem[index] += 0x61;\n'
    elif instruction == 1:
        program += 'mem[index] -= 0x61;\n'
    elif instruction == 2:
        program += 'index = (index + 1) % MEM_SIZE;\n'
    elif instruction == 3:
        program += 'index = (index + MEM_SIZE - 1) % MEM_SIZE;\n'
    elif instruction == 4:
        program += 'putchar(table[mem[index]]);\n'
    elif instruction == 5:
        program += '// 5\nindex = 0\n'
    elif instruction == 6:
        program += 'while (mem[index]) {\n'
    elif instruction == 7:
        program += '}\n'
    else:
        program += '// 8\n'

with open('flagvm.c', 'wb') as f:
    f.write(header + program + footer)
